{
	"info": {
		"_postman_id": "60fb9bbe-7ca2-4c2d-9f77-e20f12adbc0a",
		"name": "GraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19372436"
	},
	"item": [
		{
			"name": "Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Check response's body length\", function () {\r",
							"    pm.expect(response.length).to.eql(10);\r",
							"});\r",
							"pm.test(\"Check response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Check keys in response\", function () {\r",
							"for(let obj of response) {\r",
							"        pm.expect(obj).to.have.keys(['id', 'name', 'email', 'gender', 'status'])\r",
							"          }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"pm.collectionVariables.set('id', response.id)\r",
							"pm.test(\"Check created user name is correct\", function () {\r",
							"    pm.expect(response.name).to.be.equal('Ondra Zbyshek');\r",
							"});\r",
							"pm.test(\"Check created user keys amount\", function () {\r",
							"    pm.expect(Object.keys(response)).to.have.length(5);\r",
							"});\r",
							"pm.test(\"Check keys names in response\", function () {\r",
							"    pm.expect(response).to.have.keys(['id', 'name', 'email', 'gender', 'status'])\r",
							"});\r",
							"pm.test(\"Check created user keys and values\", function () {\r",
							"    pm.expect(response).to.include({\r",
							"        'name': 'Ondra Zbyshek',\r",
							"        'email': 'asas@mail.com',\r",
							"        'gender': 'male',\r",
							"        'status': 'active'\r",
							"    });\r",
							"});\r",
							"pm.collectionVariables.set('userName', response.name)\r",
							"pm.collectionVariables.set('email', response.email)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ondra Zbyshek\",\r\n    \"email\": \"asas@mail.com\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Check response's body length\", function () {\r",
							"    pm.expect(response.length).to.eql(1);\r",
							"});\r",
							"pm.test(\"Check response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Check keys in response\", function () {\r",
							"for(let obj of response) {\r",
							"    pm.expect(obj).to.have.keys(['id', 'name', 'email', 'gender', 'status'])\r",
							"        }\r",
							"});\r",
							"pm.test(\"Check the created user id\", function () {\r",
							"    pm.expect(response[0].id).to.equal(pm.collectionVariables.get('id'));\r",
							"});\r",
							"pm.test(\"Check the created user name\", function () {\r",
							"    pm.expect(response[0].name).to.equal(pm.collectionVariables.get('userName'));\r",
							"});\r",
							"pm.test(\"Check the created user email\", function () {\r",
							"    pm.expect(response[0].email).to.equal(pm.collectionVariables.get('email'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}?name={{userName}}&email={{email}}",
					"host": [
						"{{baseUrl}}"
					],
					"query": [
						{
							"key": "name",
							"value": "{{userName}}"
						},
						{
							"key": "email",
							"value": "{{email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"pm.test(\"Check response email matches string\", function () {\r",
							"    pm.expect(response.email).to.be.eq(\"sa@mail.com\");\r",
							"});\r",
							"pm.test(\"Check response id\", function () {\r",
							"   pm.expect(response.id).to.be.eq(pm.collectionVariables.get('id'));\r",
							"});\r",
							"pm.test(\"Check response status\", function () {\r",
							"   pm.expect(response.status).to.be.eq('active');\r",
							"});\r",
							"pm.test(\"Check created user keys\", function () {\r",
							"    pm.expect(Object.keys(response)).to.have.length(5);\r",
							"});\r",
							"pm.test(\"Check keys names in response\", function () {\r",
							"    pm.expect(response).to.have.keys(['id', 'name', 'email', 'gender', 'status'])\r",
							"});\r",
							"pm.test(\"Check created user keys and values\", function () {\r",
							"    pm.expect(response).to.include({\r",
							"        \"email\": \"sa@mail.com\",\r",
							"        \"name\": \"Ondra Zloshek\",\r",
							"        \"gender\": \"male\",\r",
							"        \"status\": \"active\",\r",
							"    });\r",
							"});\r",
							"pm.collectionVariables.set('patchedUserName', response.name)\r",
							"pm.collectionVariables.set('patchedEmail', response.email)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ondra Zloshek\",\r\n    \"email\": \"sa@mail.com\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}{{id}}",
					"host": [
						"{{baseUrl}}{{id}}"
					],
					"query": [
						{
							"key": "id",
							"value": "3551",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get patched user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Check response's body length\", function () {\r",
							"    pm.expect(response.length).to.eql(1);\r",
							"});\r",
							"pm.test(\"Check response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Check keys in response\", function () {\r",
							"for(let obj of response) {\r",
							"    pm.expect(obj).to.have.keys(['id', 'name', 'email', 'gender', 'status'])\r",
							"        }\r",
							"});\r",
							"pm.test(\"Check the created user id\", function () {\r",
							"    pm.expect(response[0].id).to.equal(pm.collectionVariables.get('id'));\r",
							"});\r",
							"pm.test(\"Check the created user name\", function () {\r",
							"    pm.expect(response[0].name).to.equal(pm.collectionVariables.get('patchedUserName'));\r",
							"});\r",
							"pm.test(\"Check the created user email\", function () {\r",
							"    pm.expect(response[0].email).to.equal(pm.collectionVariables.get('patchedEmail'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}?name={{patchedUserName}}&email={{patchedEmail}}",
					"host": [
						"{{baseUrl}}"
					],
					"query": [
						{
							"key": "name",
							"value": "{{patchedUserName}}"
						},
						{
							"key": "email",
							"value": "{{patchedEmail}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}{{id}}",
					"host": [
						"{{baseUrl}}{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get deleted user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Check Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Check response length\", function () {\r",
							"    pm.expect(response.message).to.equal(\"Resource not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}{{id}}",
					"host": [
						"{{baseUrl}}{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Check response's body length\", function () {\r",
							"    response.forEach(el => pm.expect(Object.keys(el)).to.have.length(4))\r",
							"});\r",
							"pm.test(\"Check response's body length\", function () {\r",
							"    pm.expect(response).to.have.length(10)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/posts",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"posts"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "token",
			"value": "a3672aea6955926bf817d58232ae42882c6eaba1d6a5a10d148482a884ff354d",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "https://gorest.co.in/public/v2/users/",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "Ondra Zbyshek"
		},
		{
			"key": "email",
			"value": "asas@mail.com"
		},
		{
			"key": "patchedUserName",
			"value": "Ondra Zloshek"
		},
		{
			"key": "patchedEmail",
			"value": "sa@mail.com"
		}
	]
}